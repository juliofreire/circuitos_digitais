// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2022 01:22:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto_final_vlg_sample_tst(
	clk,
	N,
	sampler_tx
);
input  clk;
input  N;
output sampler_tx;

reg sample;
time current_time;
always @(clk or N)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto_final_vlg_check_tst (
	b1,
	b2,
	c0,
	c1,
	sampler_rx
);
input  b1;
input  b2;
input  c0;
input  c1;
input sampler_rx;

reg  b1_expected;
reg  b2_expected;
reg  c0_expected;
reg  c1_expected;

reg  b1_prev;
reg  b2_prev;
reg  c0_prev;
reg  c1_prev;

reg  b1_expected_prev;
reg  b2_expected_prev;
reg  c0_expected_prev;
reg  c1_expected_prev;

reg  last_b1_exp;
reg  last_b2_exp;
reg  last_c0_exp;
reg  last_c1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	b1_prev = b1;
	b2_prev = b2;
	c0_prev = c0;
	c1_prev = c1;
end

// update expected /o prevs

always @(trigger)
begin
	b1_expected_prev = b1_expected;
	b2_expected_prev = b2_expected;
	c0_expected_prev = c0_expected;
	c1_expected_prev = c1_expected;
end



// expected b1
initial
begin
	b1_expected = 1'bX;
end 

// expected b2
initial
begin
	b2_expected = 1'bX;
end 

// expected c1
initial
begin
	c1_expected = 1'bX;
end 

// expected c0
initial
begin
	c0_expected = 1'bX;
end 
// generate trigger
always @(b1_expected or b1 or b2_expected or b2 or c0_expected or c0 or c1_expected or c1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected b1 = %b | expected b2 = %b | expected c0 = %b | expected c1 = %b | ",b1_expected_prev,b2_expected_prev,c0_expected_prev,c1_expected_prev);
	$display("| real b1 = %b | real b2 = %b | real c0 = %b | real c1 = %b | ",b1_prev,b2_prev,c0_prev,c1_prev);
`endif
	if (
		( b1_expected_prev !== 1'bx ) && ( b1_prev !== b1_expected_prev )
		&& ((b1_expected_prev !== last_b1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_expected_prev);
		$display ("     Real value = %b", b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_b1_exp = b1_expected_prev;
	end
	if (
		( b2_expected_prev !== 1'bx ) && ( b2_prev !== b2_expected_prev )
		&& ((b2_expected_prev !== last_b2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_expected_prev);
		$display ("     Real value = %b", b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b2_exp = b2_expected_prev;
	end
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( c1_expected_prev !== 1'bx ) && ( c1_prev !== c1_expected_prev )
		&& ((c1_expected_prev !== last_c1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c1_exp = c1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg N;
// wires                                               
wire b1;
wire b2;
wire c0;
wire c1;

wire sampler;                             

// assign statements (if any)                          
projeto_final i1 (
// port map - connection between master ports and signals/registers   
	.b1(b1),
	.b2(b2),
	.c0(c0),
	.c1(c1),
	.clk(clk),
	.N(N)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// N
always
begin
	N = 1'b0;
	N = #250000 1'b1;
	#250000;
end 

projeto_final_vlg_sample_tst tb_sample (
	.clk(clk),
	.N(N),
	.sampler_tx(sampler)
);

projeto_final_vlg_check_tst tb_out(
	.b1(b1),
	.b2(b2),
	.c0(c0),
	.c1(c1),
	.sampler_rx(sampler)
);
endmodule

