// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2022 12:57:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto_final_vlg_sample_tst(
	btn,
	clk,
	N,
	sampler_tx
);
input  btn;
input  clk;
input  N;
output sampler_tx;

reg sample;
time current_time;
always @(btn or clk or N)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto_final_vlg_check_tst (
	b1,
	b2,
	c0,
	c1,
	d1,
	d2,
	T,
	sampler_rx
);
input  b1;
input  b2;
input  c0;
input  c1;
input  d1;
input  d2;
input [31:0] T;
input sampler_rx;

reg  b1_expected;
reg  b2_expected;
reg  c0_expected;
reg  c1_expected;
reg  d1_expected;
reg  d2_expected;
reg [31:0] T_expected;

reg  b1_prev;
reg  b2_prev;
reg  c0_prev;
reg  c1_prev;
reg  d1_prev;
reg  d2_prev;
reg [31:0] T_prev;

reg  b1_expected_prev;
reg  b2_expected_prev;
reg  c0_expected_prev;
reg  c1_expected_prev;
reg  d1_expected_prev;
reg  d2_expected_prev;
reg [31:0] T_expected_prev;

reg  last_b1_exp;
reg  last_b2_exp;
reg  last_c0_exp;
reg  last_c1_exp;
reg  last_d1_exp;
reg  last_d2_exp;
reg [31:0] last_T_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	b1_prev = b1;
	b2_prev = b2;
	c0_prev = c0;
	c1_prev = c1;
	d1_prev = d1;
	d2_prev = d2;
	T_prev = T;
end

// update expected /o prevs

always @(trigger)
begin
	b1_expected_prev = b1_expected;
	b2_expected_prev = b2_expected;
	c0_expected_prev = c0_expected;
	c1_expected_prev = c1_expected;
	d1_expected_prev = d1_expected;
	d2_expected_prev = d2_expected;
	T_expected_prev = T_expected;
end



// expected b1
initial
begin
	b1_expected = 1'bX;
end 

// expected b2
initial
begin
	b2_expected = 1'bX;
end 

// expected c1
initial
begin
	c1_expected = 1'bX;
end 

// expected c0
initial
begin
	c0_expected = 1'bX;
end 

// expected d1
initial
begin
	d1_expected = 1'bX;
end 

// expected d2
initial
begin
	d2_expected = 1'bX;
end 
// expected T[ 31 ]
initial
begin
	T_expected[31] = 1'bX;
end 
// expected T[ 30 ]
initial
begin
	T_expected[30] = 1'bX;
end 
// expected T[ 29 ]
initial
begin
	T_expected[29] = 1'bX;
end 
// expected T[ 28 ]
initial
begin
	T_expected[28] = 1'bX;
end 
// expected T[ 27 ]
initial
begin
	T_expected[27] = 1'bX;
end 
// expected T[ 26 ]
initial
begin
	T_expected[26] = 1'bX;
end 
// expected T[ 25 ]
initial
begin
	T_expected[25] = 1'bX;
end 
// expected T[ 24 ]
initial
begin
	T_expected[24] = 1'bX;
end 
// expected T[ 23 ]
initial
begin
	T_expected[23] = 1'bX;
end 
// expected T[ 22 ]
initial
begin
	T_expected[22] = 1'bX;
end 
// expected T[ 21 ]
initial
begin
	T_expected[21] = 1'bX;
end 
// expected T[ 20 ]
initial
begin
	T_expected[20] = 1'bX;
end 
// expected T[ 19 ]
initial
begin
	T_expected[19] = 1'bX;
end 
// expected T[ 18 ]
initial
begin
	T_expected[18] = 1'bX;
end 
// expected T[ 17 ]
initial
begin
	T_expected[17] = 1'bX;
end 
// expected T[ 16 ]
initial
begin
	T_expected[16] = 1'bX;
end 
// expected T[ 15 ]
initial
begin
	T_expected[15] = 1'bX;
end 
// expected T[ 14 ]
initial
begin
	T_expected[14] = 1'bX;
end 
// expected T[ 13 ]
initial
begin
	T_expected[13] = 1'bX;
end 
// expected T[ 12 ]
initial
begin
	T_expected[12] = 1'bX;
end 
// expected T[ 11 ]
initial
begin
	T_expected[11] = 1'bX;
end 
// expected T[ 10 ]
initial
begin
	T_expected[10] = 1'bX;
end 
// expected T[ 9 ]
initial
begin
	T_expected[9] = 1'bX;
end 
// expected T[ 8 ]
initial
begin
	T_expected[8] = 1'bX;
end 
// expected T[ 7 ]
initial
begin
	T_expected[7] = 1'bX;
end 
// expected T[ 6 ]
initial
begin
	T_expected[6] = 1'bX;
end 
// expected T[ 5 ]
initial
begin
	T_expected[5] = 1'bX;
end 
// expected T[ 4 ]
initial
begin
	T_expected[4] = 1'bX;
end 
// expected T[ 3 ]
initial
begin
	T_expected[3] = 1'bX;
end 
// expected T[ 2 ]
initial
begin
	T_expected[2] = 1'bX;
end 
// expected T[ 1 ]
initial
begin
	T_expected[1] = 1'bX;
end 
// expected T[ 0 ]
initial
begin
	T_expected[0] = 1'bX;
end 
// generate trigger
always @(b1_expected or b1 or b2_expected or b2 or c0_expected or c0 or c1_expected or c1 or d1_expected or d1 or d2_expected or d2 or T_expected or T)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected b1 = %b | expected b2 = %b | expected c0 = %b | expected c1 = %b | expected d1 = %b | expected d2 = %b | expected T = %b | ",b1_expected_prev,b2_expected_prev,c0_expected_prev,c1_expected_prev,d1_expected_prev,d2_expected_prev,T_expected_prev);
	$display("| real b1 = %b | real b2 = %b | real c0 = %b | real c1 = %b | real d1 = %b | real d2 = %b | real T = %b | ",b1_prev,b2_prev,c0_prev,c1_prev,d1_prev,d2_prev,T_prev);
`endif
	if (
		( b1_expected_prev !== 1'bx ) && ( b1_prev !== b1_expected_prev )
		&& ((b1_expected_prev !== last_b1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_expected_prev);
		$display ("     Real value = %b", b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_b1_exp = b1_expected_prev;
	end
	if (
		( b2_expected_prev !== 1'bx ) && ( b2_prev !== b2_expected_prev )
		&& ((b2_expected_prev !== last_b2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_expected_prev);
		$display ("     Real value = %b", b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b2_exp = b2_expected_prev;
	end
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( c1_expected_prev !== 1'bx ) && ( c1_prev !== c1_expected_prev )
		&& ((c1_expected_prev !== last_c1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c1_exp = c1_expected_prev;
	end
	if (
		( d1_expected_prev !== 1'bx ) && ( d1_prev !== d1_expected_prev )
		&& ((d1_expected_prev !== last_d1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_d1_exp = d1_expected_prev;
	end
	if (
		( d2_expected_prev !== 1'bx ) && ( d2_prev !== d2_expected_prev )
		&& ((d2_expected_prev !== last_d2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_d2_exp = d2_expected_prev;
	end
	if (
		( T_expected_prev[0] !== 1'bx ) && ( T_prev[0] !== T_expected_prev[0] )
		&& ((T_expected_prev[0] !== last_T_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[0] = T_expected_prev[0];
	end
	if (
		( T_expected_prev[1] !== 1'bx ) && ( T_prev[1] !== T_expected_prev[1] )
		&& ((T_expected_prev[1] !== last_T_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[1] = T_expected_prev[1];
	end
	if (
		( T_expected_prev[2] !== 1'bx ) && ( T_prev[2] !== T_expected_prev[2] )
		&& ((T_expected_prev[2] !== last_T_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[2] = T_expected_prev[2];
	end
	if (
		( T_expected_prev[3] !== 1'bx ) && ( T_prev[3] !== T_expected_prev[3] )
		&& ((T_expected_prev[3] !== last_T_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[3] = T_expected_prev[3];
	end
	if (
		( T_expected_prev[4] !== 1'bx ) && ( T_prev[4] !== T_expected_prev[4] )
		&& ((T_expected_prev[4] !== last_T_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[4] = T_expected_prev[4];
	end
	if (
		( T_expected_prev[5] !== 1'bx ) && ( T_prev[5] !== T_expected_prev[5] )
		&& ((T_expected_prev[5] !== last_T_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[5] = T_expected_prev[5];
	end
	if (
		( T_expected_prev[6] !== 1'bx ) && ( T_prev[6] !== T_expected_prev[6] )
		&& ((T_expected_prev[6] !== last_T_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[6] = T_expected_prev[6];
	end
	if (
		( T_expected_prev[7] !== 1'bx ) && ( T_prev[7] !== T_expected_prev[7] )
		&& ((T_expected_prev[7] !== last_T_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[7] = T_expected_prev[7];
	end
	if (
		( T_expected_prev[8] !== 1'bx ) && ( T_prev[8] !== T_expected_prev[8] )
		&& ((T_expected_prev[8] !== last_T_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[8] = T_expected_prev[8];
	end
	if (
		( T_expected_prev[9] !== 1'bx ) && ( T_prev[9] !== T_expected_prev[9] )
		&& ((T_expected_prev[9] !== last_T_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[9] = T_expected_prev[9];
	end
	if (
		( T_expected_prev[10] !== 1'bx ) && ( T_prev[10] !== T_expected_prev[10] )
		&& ((T_expected_prev[10] !== last_T_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[10] = T_expected_prev[10];
	end
	if (
		( T_expected_prev[11] !== 1'bx ) && ( T_prev[11] !== T_expected_prev[11] )
		&& ((T_expected_prev[11] !== last_T_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[11] = T_expected_prev[11];
	end
	if (
		( T_expected_prev[12] !== 1'bx ) && ( T_prev[12] !== T_expected_prev[12] )
		&& ((T_expected_prev[12] !== last_T_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[12] = T_expected_prev[12];
	end
	if (
		( T_expected_prev[13] !== 1'bx ) && ( T_prev[13] !== T_expected_prev[13] )
		&& ((T_expected_prev[13] !== last_T_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[13] = T_expected_prev[13];
	end
	if (
		( T_expected_prev[14] !== 1'bx ) && ( T_prev[14] !== T_expected_prev[14] )
		&& ((T_expected_prev[14] !== last_T_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[14] = T_expected_prev[14];
	end
	if (
		( T_expected_prev[15] !== 1'bx ) && ( T_prev[15] !== T_expected_prev[15] )
		&& ((T_expected_prev[15] !== last_T_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[15] = T_expected_prev[15];
	end
	if (
		( T_expected_prev[16] !== 1'bx ) && ( T_prev[16] !== T_expected_prev[16] )
		&& ((T_expected_prev[16] !== last_T_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[16] = T_expected_prev[16];
	end
	if (
		( T_expected_prev[17] !== 1'bx ) && ( T_prev[17] !== T_expected_prev[17] )
		&& ((T_expected_prev[17] !== last_T_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[17] = T_expected_prev[17];
	end
	if (
		( T_expected_prev[18] !== 1'bx ) && ( T_prev[18] !== T_expected_prev[18] )
		&& ((T_expected_prev[18] !== last_T_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[18] = T_expected_prev[18];
	end
	if (
		( T_expected_prev[19] !== 1'bx ) && ( T_prev[19] !== T_expected_prev[19] )
		&& ((T_expected_prev[19] !== last_T_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[19] = T_expected_prev[19];
	end
	if (
		( T_expected_prev[20] !== 1'bx ) && ( T_prev[20] !== T_expected_prev[20] )
		&& ((T_expected_prev[20] !== last_T_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[20] = T_expected_prev[20];
	end
	if (
		( T_expected_prev[21] !== 1'bx ) && ( T_prev[21] !== T_expected_prev[21] )
		&& ((T_expected_prev[21] !== last_T_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[21] = T_expected_prev[21];
	end
	if (
		( T_expected_prev[22] !== 1'bx ) && ( T_prev[22] !== T_expected_prev[22] )
		&& ((T_expected_prev[22] !== last_T_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[22] = T_expected_prev[22];
	end
	if (
		( T_expected_prev[23] !== 1'bx ) && ( T_prev[23] !== T_expected_prev[23] )
		&& ((T_expected_prev[23] !== last_T_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[23] = T_expected_prev[23];
	end
	if (
		( T_expected_prev[24] !== 1'bx ) && ( T_prev[24] !== T_expected_prev[24] )
		&& ((T_expected_prev[24] !== last_T_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[24] = T_expected_prev[24];
	end
	if (
		( T_expected_prev[25] !== 1'bx ) && ( T_prev[25] !== T_expected_prev[25] )
		&& ((T_expected_prev[25] !== last_T_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[25] = T_expected_prev[25];
	end
	if (
		( T_expected_prev[26] !== 1'bx ) && ( T_prev[26] !== T_expected_prev[26] )
		&& ((T_expected_prev[26] !== last_T_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[26] = T_expected_prev[26];
	end
	if (
		( T_expected_prev[27] !== 1'bx ) && ( T_prev[27] !== T_expected_prev[27] )
		&& ((T_expected_prev[27] !== last_T_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[27] = T_expected_prev[27];
	end
	if (
		( T_expected_prev[28] !== 1'bx ) && ( T_prev[28] !== T_expected_prev[28] )
		&& ((T_expected_prev[28] !== last_T_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[28] = T_expected_prev[28];
	end
	if (
		( T_expected_prev[29] !== 1'bx ) && ( T_prev[29] !== T_expected_prev[29] )
		&& ((T_expected_prev[29] !== last_T_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[29] = T_expected_prev[29];
	end
	if (
		( T_expected_prev[30] !== 1'bx ) && ( T_prev[30] !== T_expected_prev[30] )
		&& ((T_expected_prev[30] !== last_T_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[30] = T_expected_prev[30];
	end
	if (
		( T_expected_prev[31] !== 1'bx ) && ( T_prev[31] !== T_expected_prev[31] )
		&& ((T_expected_prev[31] !== last_T_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_exp[31] = T_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn;
reg clk;
reg N;
// wires                                               
wire b1;
wire b2;
wire c0;
wire c1;
wire d1;
wire d2;
wire [31:0] T;

wire sampler;                             

// assign statements (if any)                          
projeto_final i1 (
// port map - connection between master ports and signals/registers   
	.b1(b1),
	.b2(b2),
	.btn(btn),
	.c0(c0),
	.c1(c1),
	.clk(clk),
	.d1(d1),
	.d2(d2),
	.N(N),
	.T(T)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// N
always
begin
	N = 1'b0;
	N = #250000 1'b1;
	#250000;
end 

// btn
initial
begin
	btn = 1'b1;
	btn = #100000 1'b0;
end 

projeto_final_vlg_sample_tst tb_sample (
	.btn(btn),
	.clk(clk),
	.N(N),
	.sampler_tx(sampler)
);

projeto_final_vlg_check_tst tb_out(
	.b1(b1),
	.b2(b2),
	.c0(c0),
	.c1(c1),
	.d1(d1),
	.d2(d2),
	.T(T),
	.sampler_rx(sampler)
);
endmodule

