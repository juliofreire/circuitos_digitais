// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/09/2022 11:19:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    relatorio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relatorio_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input  a;
input  b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module relatorio_vlg_check_tst (
	c211,
	c212,
	c221,
	c222,
	id1,
	id2,
	id3,
	q1,
	q2,
	rc21,
	rc22,
	rid1,
	rid2,
	rid3,
	sampler_rx
);
input  c211;
input  c212;
input  c221;
input  c222;
input  id1;
input  id2;
input  id3;
input  q1;
input  q2;
input  rc21;
input  rc22;
input  rid1;
input  rid2;
input  rid3;
input sampler_rx;

reg  c211_expected;
reg  c212_expected;
reg  c221_expected;
reg  c222_expected;
reg  id1_expected;
reg  id2_expected;
reg  id3_expected;
reg  q1_expected;
reg  q2_expected;
reg  rc21_expected;
reg  rc22_expected;
reg  rid1_expected;
reg  rid2_expected;
reg  rid3_expected;

reg  c211_prev;
reg  c212_prev;
reg  c221_prev;
reg  c222_prev;
reg  id1_prev;
reg  id2_prev;
reg  id3_prev;
reg  q1_prev;
reg  q2_prev;
reg  rc21_prev;
reg  rc22_prev;
reg  rid1_prev;
reg  rid2_prev;
reg  rid3_prev;

reg  c211_expected_prev;
reg  c212_expected_prev;
reg  c221_expected_prev;
reg  c222_expected_prev;
reg  id1_expected_prev;
reg  id2_expected_prev;
reg  id3_expected_prev;
reg  q1_expected_prev;
reg  q2_expected_prev;
reg  rc21_expected_prev;
reg  rc22_expected_prev;
reg  rid1_expected_prev;
reg  rid2_expected_prev;
reg  rid3_expected_prev;

reg  last_c211_exp;
reg  last_c212_exp;
reg  last_c221_exp;
reg  last_c222_exp;
reg  last_id1_exp;
reg  last_id2_exp;
reg  last_id3_exp;
reg  last_q1_exp;
reg  last_q2_exp;
reg  last_rc21_exp;
reg  last_rc22_exp;
reg  last_rid1_exp;
reg  last_rid2_exp;
reg  last_rid3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	c211_prev = c211;
	c212_prev = c212;
	c221_prev = c221;
	c222_prev = c222;
	id1_prev = id1;
	id2_prev = id2;
	id3_prev = id3;
	q1_prev = q1;
	q2_prev = q2;
	rc21_prev = rc21;
	rc22_prev = rc22;
	rid1_prev = rid1;
	rid2_prev = rid2;
	rid3_prev = rid3;
end

// update expected /o prevs

always @(trigger)
begin
	c211_expected_prev = c211_expected;
	c212_expected_prev = c212_expected;
	c221_expected_prev = c221_expected;
	c222_expected_prev = c222_expected;
	id1_expected_prev = id1_expected;
	id2_expected_prev = id2_expected;
	id3_expected_prev = id3_expected;
	q1_expected_prev = q1_expected;
	q2_expected_prev = q2_expected;
	rc21_expected_prev = rc21_expected;
	rc22_expected_prev = rc22_expected;
	rid1_expected_prev = rid1_expected;
	rid2_expected_prev = rid2_expected;
	rid3_expected_prev = rid3_expected;
end



// expected q1
initial
begin
	q1_expected = 1'bX;
end 

// expected q2
initial
begin
	q2_expected = 1'bX;
end 

// expected id1
initial
begin
	id1_expected = 1'bX;
end 

// expected id2
initial
begin
	id2_expected = 1'bX;
end 

// expected id3
initial
begin
	id3_expected = 1'bX;
end 

// expected rid1
initial
begin
	rid1_expected = 1'bX;
end 

// expected rid2
initial
begin
	rid2_expected = 1'bX;
end 

// expected rid3
initial
begin
	rid3_expected = 1'bX;
end 

// expected c211
initial
begin
	c211_expected = 1'bX;
end 

// expected c212
initial
begin
	c212_expected = 1'bX;
end 

// expected c221
initial
begin
	c221_expected = 1'bX;
end 

// expected c222
initial
begin
	c222_expected = 1'bX;
end 

// expected rc21
initial
begin
	rc21_expected = 1'bX;
end 

// expected rc22
initial
begin
	rc22_expected = 1'bX;
end 
// generate trigger
always @(c211_expected or c211 or c212_expected or c212 or c221_expected or c221 or c222_expected or c222 or id1_expected or id1 or id2_expected or id2 or id3_expected or id3 or q1_expected or q1 or q2_expected or q2 or rc21_expected or rc21 or rc22_expected or rc22 or rid1_expected or rid1 or rid2_expected or rid2 or rid3_expected or rid3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c211 = %b | expected c212 = %b | expected c221 = %b | expected c222 = %b | expected id1 = %b | expected id2 = %b | expected id3 = %b | expected q1 = %b | expected q2 = %b | expected rc21 = %b | expected rc22 = %b | expected rid1 = %b | expected rid2 = %b | expected rid3 = %b | ",c211_expected_prev,c212_expected_prev,c221_expected_prev,c222_expected_prev,id1_expected_prev,id2_expected_prev,id3_expected_prev,q1_expected_prev,q2_expected_prev,rc21_expected_prev,rc22_expected_prev,rid1_expected_prev,rid2_expected_prev,rid3_expected_prev);
	$display("| real c211 = %b | real c212 = %b | real c221 = %b | real c222 = %b | real id1 = %b | real id2 = %b | real id3 = %b | real q1 = %b | real q2 = %b | real rc21 = %b | real rc22 = %b | real rid1 = %b | real rid2 = %b | real rid3 = %b | ",c211_prev,c212_prev,c221_prev,c222_prev,id1_prev,id2_prev,id3_prev,q1_prev,q2_prev,rc21_prev,rc22_prev,rid1_prev,rid2_prev,rid3_prev);
`endif
	if (
		( c211_expected_prev !== 1'bx ) && ( c211_prev !== c211_expected_prev )
		&& ((c211_expected_prev !== last_c211_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c211 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c211_expected_prev);
		$display ("     Real value = %b", c211_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c211_exp = c211_expected_prev;
	end
	if (
		( c212_expected_prev !== 1'bx ) && ( c212_prev !== c212_expected_prev )
		&& ((c212_expected_prev !== last_c212_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c212 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c212_expected_prev);
		$display ("     Real value = %b", c212_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c212_exp = c212_expected_prev;
	end
	if (
		( c221_expected_prev !== 1'bx ) && ( c221_prev !== c221_expected_prev )
		&& ((c221_expected_prev !== last_c221_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c221 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c221_expected_prev);
		$display ("     Real value = %b", c221_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c221_exp = c221_expected_prev;
	end
	if (
		( c222_expected_prev !== 1'bx ) && ( c222_prev !== c222_expected_prev )
		&& ((c222_expected_prev !== last_c222_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c222 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c222_expected_prev);
		$display ("     Real value = %b", c222_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c222_exp = c222_expected_prev;
	end
	if (
		( id1_expected_prev !== 1'bx ) && ( id1_prev !== id1_expected_prev )
		&& ((id1_expected_prev !== last_id1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id1_expected_prev);
		$display ("     Real value = %b", id1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_id1_exp = id1_expected_prev;
	end
	if (
		( id2_expected_prev !== 1'bx ) && ( id2_prev !== id2_expected_prev )
		&& ((id2_expected_prev !== last_id2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id2_expected_prev);
		$display ("     Real value = %b", id2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id2_exp = id2_expected_prev;
	end
	if (
		( id3_expected_prev !== 1'bx ) && ( id3_prev !== id3_expected_prev )
		&& ((id3_expected_prev !== last_id3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id3_expected_prev);
		$display ("     Real value = %b", id3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id3_exp = id3_expected_prev;
	end
	if (
		( q1_expected_prev !== 1'bx ) && ( q1_prev !== q1_expected_prev )
		&& ((q1_expected_prev !== last_q1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1_expected_prev);
		$display ("     Real value = %b", q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_q1_exp = q1_expected_prev;
	end
	if (
		( q2_expected_prev !== 1'bx ) && ( q2_prev !== q2_expected_prev )
		&& ((q2_expected_prev !== last_q2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_expected_prev);
		$display ("     Real value = %b", q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_q2_exp = q2_expected_prev;
	end
	if (
		( rc21_expected_prev !== 1'bx ) && ( rc21_prev !== rc21_expected_prev )
		&& ((rc21_expected_prev !== last_rc21_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rc21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rc21_expected_prev);
		$display ("     Real value = %b", rc21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rc21_exp = rc21_expected_prev;
	end
	if (
		( rc22_expected_prev !== 1'bx ) && ( rc22_prev !== rc22_expected_prev )
		&& ((rc22_expected_prev !== last_rc22_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rc22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rc22_expected_prev);
		$display ("     Real value = %b", rc22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rc22_exp = rc22_expected_prev;
	end
	if (
		( rid1_expected_prev !== 1'bx ) && ( rid1_prev !== rid1_expected_prev )
		&& ((rid1_expected_prev !== last_rid1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rid1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rid1_expected_prev);
		$display ("     Real value = %b", rid1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rid1_exp = rid1_expected_prev;
	end
	if (
		( rid2_expected_prev !== 1'bx ) && ( rid2_prev !== rid2_expected_prev )
		&& ((rid2_expected_prev !== last_rid2_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rid2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rid2_expected_prev);
		$display ("     Real value = %b", rid2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_rid2_exp = rid2_expected_prev;
	end
	if (
		( rid3_expected_prev !== 1'bx ) && ( rid3_prev !== rid3_expected_prev )
		&& ((rid3_expected_prev !== last_rid3_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rid3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rid3_expected_prev);
		$display ("     Real value = %b", rid3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_rid3_exp = rid3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module relatorio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
// wires                                               
wire c211;
wire c212;
wire c221;
wire c222;
wire id1;
wire id2;
wire id3;
wire q1;
wire q2;
wire rc21;
wire rc22;
wire rid1;
wire rid2;
wire rid3;

wire sampler;                             

// assign statements (if any)                          
relatorio i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c211(c211),
	.c212(c212),
	.c221(c221),
	.c222(c222),
	.id1(id1),
	.id2(id2),
	.id3(id3),
	.q1(q1),
	.q2(q2),
	.rc21(rc21),
	.rc22(rc22),
	.rid1(rid1),
	.rid2(rid2),
	.rid3(rid3)
);

// a
initial
begin
	a = 1'b0;
	a = #10000 1'b1;
	a = #20000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #20000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #20000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #20000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #30000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #15000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #20000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #35000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #35000 1'b0;
	a = #10000 1'b1;
	a = #15000 1'b0;
	a = #15000 1'b1;
	a = #10000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
end 

// b
initial
begin
	b = 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #25000 1'b0;
	b = #15000 1'b1;
	b = #15000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #25000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #25000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #30000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #15000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #20000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #5000 1'b1;
	b = #25000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #40000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #20000 1'b1;
	b = #5000 1'b0;
	b = #25000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #15000 1'b1;
	b = #10000 1'b0;
end 

relatorio_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

relatorio_vlg_check_tst tb_out(
	.c211(c211),
	.c212(c212),
	.c221(c221),
	.c222(c222),
	.id1(id1),
	.id2(id2),
	.id3(id3),
	.q1(q1),
	.q2(q2),
	.rc21(rc21),
	.rc22(rc22),
	.rid1(rid1),
	.rid2(rid2),
	.rid3(rid3),
	.sampler_rx(sampler)
);
endmodule

