// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/07/2022 23:13:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    relatorio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relatorio_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input  a;
input  b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module relatorio_vlg_check_tst (
	i1,
	i2,
	i3,
	q1,
	q2,
	sampler_rx
);
input  i1;
input  i2;
input  i3;
input  q1;
input  q2;
input sampler_rx;

reg  i1_expected;
reg  i2_expected;
reg  i3_expected;
reg  q1_expected;
reg  q2_expected;

reg  i1_prev;
reg  i2_prev;
reg  i3_prev;
reg  q1_prev;
reg  q2_prev;

reg  i1_expected_prev;
reg  i2_expected_prev;
reg  i3_expected_prev;
reg  q1_expected_prev;
reg  q2_expected_prev;

reg  last_i1_exp;
reg  last_i2_exp;
reg  last_i3_exp;
reg  last_q1_exp;
reg  last_q2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	i1_prev = i1;
	i2_prev = i2;
	i3_prev = i3;
	q1_prev = q1;
	q2_prev = q2;
end

// update expected /o prevs

always @(trigger)
begin
	i1_expected_prev = i1_expected;
	i2_expected_prev = i2_expected;
	i3_expected_prev = i3_expected;
	q1_expected_prev = q1_expected;
	q2_expected_prev = q2_expected;
end



// expected i1
initial
begin
	i1_expected = 1'bX;
end 

// expected i2
initial
begin
	i2_expected = 1'bX;
end 

// expected i3
initial
begin
	i3_expected = 1'bX;
end 

// expected q1
initial
begin
	q1_expected = 1'bX;
end 

// expected q2
initial
begin
	q2_expected = 1'bX;
end 
// generate trigger
always @(i1_expected or i1 or i2_expected or i2 or i3_expected or i3 or q1_expected or q1 or q2_expected or q2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected i1 = %b | expected i2 = %b | expected i3 = %b | expected q1 = %b | expected q2 = %b | ",i1_expected_prev,i2_expected_prev,i3_expected_prev,q1_expected_prev,q2_expected_prev);
	$display("| real i1 = %b | real i2 = %b | real i3 = %b | real q1 = %b | real q2 = %b | ",i1_prev,i2_prev,i3_prev,q1_prev,q2_prev);
`endif
	if (
		( i1_expected_prev !== 1'bx ) && ( i1_prev !== i1_expected_prev )
		&& ((i1_expected_prev !== last_i1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i1_expected_prev);
		$display ("     Real value = %b", i1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_i1_exp = i1_expected_prev;
	end
	if (
		( i2_expected_prev !== 1'bx ) && ( i2_prev !== i2_expected_prev )
		&& ((i2_expected_prev !== last_i2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i2_expected_prev);
		$display ("     Real value = %b", i2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i2_exp = i2_expected_prev;
	end
	if (
		( i3_expected_prev !== 1'bx ) && ( i3_prev !== i3_expected_prev )
		&& ((i3_expected_prev !== last_i3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i3_expected_prev);
		$display ("     Real value = %b", i3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_i3_exp = i3_expected_prev;
	end
	if (
		( q1_expected_prev !== 1'bx ) && ( q1_prev !== q1_expected_prev )
		&& ((q1_expected_prev !== last_q1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1_expected_prev);
		$display ("     Real value = %b", q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q1_exp = q1_expected_prev;
	end
	if (
		( q2_expected_prev !== 1'bx ) && ( q2_prev !== q2_expected_prev )
		&& ((q2_expected_prev !== last_q2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_expected_prev);
		$display ("     Real value = %b", q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q2_exp = q2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module relatorio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
// wires                                               
wire i1;
wire i2;
wire i3;
wire q1;
wire q2;

wire sampler;                             

// assign statements (if any)                          
relatorio i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.i1(i1),
	.i2(i2),
	.i3(i3),
	.q1(q1),
	.q2(q2)
);

// a
initial
begin
	a = 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #20000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #25000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #10000 1'b1;
	a = #35000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #25000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #45000 1'b0;
	a = #15000 1'b1;
	a = #25000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #25000 1'b1;
	a = #10000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #15000 1'b0;
end 

// b
initial
begin
	b = 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #20000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #15000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #20000 1'b1;
	b = #5000 1'b0;
	b = #25000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #15000 1'b0;
	b = #5000 1'b1;
	b = #25000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #15000 1'b1;
	b = #60000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #20000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #25000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #15000 1'b0;
	b = #5000 1'b1;
	b = #15000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #20000 1'b1;
	b = #15000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #20000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
end 

relatorio_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

relatorio_vlg_check_tst tb_out(
	.i1(i1),
	.i2(i2),
	.i3(i3),
	.q1(q1),
	.q2(q2),
	.sampler_rx(sampler)
);
endmodule

