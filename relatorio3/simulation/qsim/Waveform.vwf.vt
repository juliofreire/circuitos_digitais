// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/30/2022 11:53:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    relatorio3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relatorio3_vlg_sample_tst(
	a,
	b,
	i0,
	i1,
	i2,
	i3,
	s,
	s0,
	s1,
	sampler_tx
);
input  a;
input  b;
input  i0;
input  i1;
input  i2;
input  i3;
input  s;
input  s0;
input  s1;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or i0 or i1 or i2 or i3 or s or s0 or s1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module relatorio3_vlg_check_tst (
	x1,
	x2,
	x3,
	sampler_rx
);
input  x1;
input  x2;
input  x3;
input sampler_rx;

reg  x1_expected;
reg  x2_expected;
reg  x3_expected;

reg  x1_prev;
reg  x2_prev;
reg  x3_prev;

reg  x1_expected_prev;
reg  x2_expected_prev;
reg  x3_expected_prev;

reg  last_x1_exp;
reg  last_x2_exp;
reg  last_x3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	x1_prev = x1;
	x2_prev = x2;
	x3_prev = x3;
end

// update expected /o prevs

always @(trigger)
begin
	x1_expected_prev = x1_expected;
	x2_expected_prev = x2_expected;
	x3_expected_prev = x3_expected;
end



// expected x1
initial
begin
	x1_expected = 1'bX;
end 

// expected x2
initial
begin
	x2_expected = 1'bX;
end 

// expected x3
initial
begin
	x3_expected = 1'bX;
end 
// generate trigger
always @(x1_expected or x1 or x2_expected or x2 or x3_expected or x3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected x1 = %b | expected x2 = %b | expected x3 = %b | ",x1_expected_prev,x2_expected_prev,x3_expected_prev);
	$display("| real x1 = %b | real x2 = %b | real x3 = %b | ",x1_prev,x2_prev,x3_prev);
`endif
	if (
		( x1_expected_prev !== 1'bx ) && ( x1_prev !== x1_expected_prev )
		&& ((x1_expected_prev !== last_x1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x1_expected_prev);
		$display ("     Real value = %b", x1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_x1_exp = x1_expected_prev;
	end
	if (
		( x2_expected_prev !== 1'bx ) && ( x2_prev !== x2_expected_prev )
		&& ((x2_expected_prev !== last_x2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x2_expected_prev);
		$display ("     Real value = %b", x2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_x2_exp = x2_expected_prev;
	end
	if (
		( x3_expected_prev !== 1'bx ) && ( x3_prev !== x3_expected_prev )
		&& ((x3_expected_prev !== last_x3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x3_expected_prev);
		$display ("     Real value = %b", x3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_x3_exp = x3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module relatorio3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg i0;
reg i1;
reg i2;
reg i3;
reg s;
reg s0;
reg s1;
// wires                                               
wire x1;
wire x2;
wire x3;

wire sampler;                             

// assign statements (if any)                          
relatorio3 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.i0(i0),
	.i1(i1),
	.i2(i2),
	.i3(i3),
	.s(s),
	.s0(s0),
	.s1(s1),
	.x1(x1),
	.x2(x2),
	.x3(x3)
);

// a
initial
begin
	a = 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #20000 1'b1;
	a = #10000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #15000 1'b0;
	a = #10000 1'b1;
	a = #30000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #15000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #35000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #15000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #10000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #25000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #15000 1'b0;
	a = #5000 1'b1;
	a = #25000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #10000 1'b0;
	a = #15000 1'b1;
	a = #60000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
	a = #5000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #10000 1'b0;
	a = #10000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #20000 1'b1;
	a = #5000 1'b0;
	a = #15000 1'b1;
	a = #5000 1'b0;
	a = #5000 1'b1;
end 

// b
initial
begin
	b = 1'b1;
	b = #10000 1'b0;
	b = #25000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #5000 1'b1;
	b = #15000 1'b0;
	b = #30000 1'b1;
	b = #20000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #20000 1'b1;
	b = #25000 1'b0;
	b = #10000 1'b1;
	b = #30000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #20000 1'b1;
	b = #15000 1'b0;
	b = #25000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #15000 1'b0;
	b = #10000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #25000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #10000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #25000 1'b1;
	b = #25000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #25000 1'b1;
	b = #15000 1'b0;
	b = #15000 1'b1;
	b = #10000 1'b0;
	b = #15000 1'b1;
	b = #15000 1'b0;
	b = #30000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #20000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #10000 1'b1;
	b = #15000 1'b0;
	b = #15000 1'b1;
	b = #10000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #15000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #5000 1'b0;
	b = #5000 1'b1;
	b = #10000 1'b0;
end 

// s
initial
begin
	s = 1'b0;
end 

// i0
initial
begin
	i0 = 1'b0;
	i0 = #35000 1'b1;
	i0 = #15000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #10000 1'b0;
	i0 = #15000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #5000 1'b1;
	i0 = #10000 1'b0;
	i0 = #15000 1'b1;
	i0 = #10000 1'b0;
	i0 = #5000 1'b1;
	i0 = #10000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #25000 1'b1;
	i0 = #15000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #15000 1'b0;
	i0 = #25000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #15000 1'b1;
	i0 = #10000 1'b0;
	i0 = #15000 1'b1;
	i0 = #10000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #10000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #15000 1'b1;
	i0 = #10000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #25000 1'b1;
	i0 = #20000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #20000 1'b1;
	i0 = #15000 1'b0;
	i0 = #5000 1'b1;
	i0 = #10000 1'b0;
	i0 = #15000 1'b1;
	i0 = #10000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #10000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #5000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #25000 1'b0;
	i0 = #5000 1'b1;
	i0 = #20000 1'b0;
	i0 = #20000 1'b1;
	i0 = #5000 1'b0;
	i0 = #15000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #5000 1'b0;
	i0 = #10000 1'b1;
	i0 = #15000 1'b0;
	i0 = #15000 1'b1;
	i0 = #5000 1'b0;
end 

// i1
initial
begin
	i1 = 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #15000 1'b0;
	i1 = #5000 1'b1;
	i1 = #40000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #15000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #15000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #20000 1'b1;
	i1 = #20000 1'b0;
	i1 = #5000 1'b1;
	i1 = #20000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #20000 1'b0;
	i1 = #15000 1'b1;
	i1 = #15000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #15000 1'b1;
	i1 = #20000 1'b0;
	i1 = #10000 1'b1;
	i1 = #20000 1'b0;
	i1 = #5000 1'b1;
	i1 = #15000 1'b0;
	i1 = #15000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #25000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #10000 1'b1;
	i1 = #10000 1'b0;
	i1 = #15000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #15000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #20000 1'b1;
	i1 = #15000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #15000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
	i1 = #15000 1'b1;
	i1 = #15000 1'b0;
	i1 = #5000 1'b1;
	i1 = #10000 1'b0;
	i1 = #5000 1'b1;
	i1 = #5000 1'b0;
end 

// i2
initial
begin
	i2 = 1'b0;
	i2 = #20000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #10000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
	i2 = #20000 1'b1;
	i2 = #15000 1'b0;
	i2 = #5000 1'b1;
	i2 = #10000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #15000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #10000 1'b0;
	i2 = #15000 1'b1;
	i2 = #15000 1'b0;
	i2 = #10000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #15000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #10000 1'b0;
	i2 = #5000 1'b1;
	i2 = #20000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #10000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #10000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #35000 1'b0;
	i2 = #5000 1'b1;
	i2 = #10000 1'b0;
	i2 = #10000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #10000 1'b0;
	i2 = #10000 1'b1;
	i2 = #15000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #10000 1'b0;
	i2 = #20000 1'b1;
	i2 = #5000 1'b0;
	i2 = #10000 1'b1;
	i2 = #15000 1'b0;
	i2 = #10000 1'b1;
	i2 = #15000 1'b0;
	i2 = #5000 1'b1;
	i2 = #35000 1'b0;
	i2 = #10000 1'b1;
	i2 = #10000 1'b0;
	i2 = #5000 1'b1;
	i2 = #30000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #10000 1'b0;
	i2 = #5000 1'b1;
	i2 = #20000 1'b0;
	i2 = #10000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #5000 1'b1;
	i2 = #10000 1'b0;
	i2 = #5000 1'b1;
	i2 = #5000 1'b0;
	i2 = #15000 1'b1;
	i2 = #5000 1'b0;
end 

// i3
initial
begin
	i3 = 1'b0;
	i3 = #5000 1'b1;
	i3 = #15000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #20000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #10000 1'b0;
	i3 = #10000 1'b1;
	i3 = #10000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #20000 1'b0;
	i3 = #25000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #10000 1'b1;
	i3 = #10000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #15000 1'b1;
	i3 = #10000 1'b0;
	i3 = #25000 1'b1;
	i3 = #5000 1'b0;
	i3 = #10000 1'b1;
	i3 = #5000 1'b0;
	i3 = #35000 1'b1;
	i3 = #5000 1'b0;
	i3 = #10000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #20000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #30000 1'b1;
	i3 = #10000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #15000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #20000 1'b1;
	i3 = #5000 1'b0;
	i3 = #10000 1'b1;
	i3 = #5000 1'b0;
	i3 = #20000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #10000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #20000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #15000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #15000 1'b0;
	i3 = #10000 1'b1;
	i3 = #10000 1'b0;
	i3 = #10000 1'b1;
	i3 = #10000 1'b0;
	i3 = #5000 1'b1;
	i3 = #10000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
	i3 = #5000 1'b0;
	i3 = #5000 1'b1;
end 

// s0
initial
begin
	s0 = 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
end 

relatorio3_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.i0(i0),
	.i1(i1),
	.i2(i2),
	.i3(i3),
	.s(s),
	.s0(s0),
	.s1(s1),
	.sampler_tx(sampler)
);

relatorio3_vlg_check_tst tb_out(
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.sampler_rx(sampler)
);
endmodule

